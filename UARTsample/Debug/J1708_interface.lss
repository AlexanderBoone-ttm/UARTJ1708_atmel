
J1708_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b9  00800100  00800100  00000746  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001368  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d71  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ea  00000000  00000000  00002985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac0  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059a  00000000  00000000  00004128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000046c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_10>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_17>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_21>
  58:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_22>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_32>
  84:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_33>
  88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 ed       	ldi	r30, 0xD2	; 210
  a8:	f6 e0       	ldi	r31, 0x06	; 6
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a0 30       	cpi	r26, 0x00	; 0
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a9 3b       	cpi	r26, 0xB9	; 185
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 4d 02 	call	0x49a	; 0x49a <main>
  ca:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_Z13config_timer0v>:
			count_times = 0;
			bit_times = 10; //10 bit times reset the end-of-packet
			TCNT0=47; //104 us overflow   1 bit times
			TIMSK0|=(1<<TOIE0);//Enable Overflow Interrupt Enable
			
			bus_status.j1708_wait_idle_time = 1;
  d2:	84 b5       	in	r24, 0x24	; 36
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	84 bd       	out	0x24, r24	; 36
  d8:	ee e6       	ldi	r30, 0x6E	; 110
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	80 83       	st	Z, r24
  e2:	8f e2       	ldi	r24, 0x2F	; 47
  e4:	86 bd       	out	0x26, r24	; 38
  e6:	08 95       	ret

000000e8 <_Z22j1708_rx_isr_receivingv>:
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_end+0x3>
  ee:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bit_times>
  f8:	8f e2       	ldi	r24, 0x2F	; 47
  fa:	86 bd       	out	0x26, r24	; 38
  fc:	ee e6       	ldi	r30, 0x6E	; 110
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
 106:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <j1708_rx_buffer0_ptr>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <j1708_rx_temp>
 110:	ef 5c       	subi	r30, 0xCF	; 207
 112:	fe 4f       	sbci	r31, 0xFE	; 254
 114:	80 83       	st	Z, r24
 116:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <j1708_rx_buffer0_count>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <j1708_rx_buffer0_count>
 120:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <j1708_rx_buffer0_ptr>
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <j1708_rx_buffer0_ptr>
 12a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <j1708_rx_temp>
 12e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j1708_checksum>
 132:	89 0f       	add	r24, r25
 134:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <j1708_checksum>
 138:	08 95       	ret

0000013a <_Z13send_checksumv>:
 13a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j1708_checksum>
 13e:	81 95       	neg	r24
 140:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	11 82       	std	Z+1, r1	; 0x01
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	85 83       	std	Z+5, r24	; 0x05
 14e:	08 95       	ret

00000150 <__vector_33>:
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
 172:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <j1708_tx_length>
 176:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <j1708_tx_ptr>
 17a:	89 17       	cp	r24, r25
 17c:	f8 f4       	brcc	.+62     	; 0x1bc <__vector_33+0x6c>
 17e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <j1708_tx_ptr>
 182:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <_ZL15j1708_tx_buffer>
 186:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <_ZL15j1708_tx_buffer+0x1>
 18a:	e8 0f       	add	r30, r24
 18c:	f1 1d       	adc	r31, r1
 18e:	80 81       	ld	r24, Z
 190:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 194:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <j1708_tx_ptr>
 198:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <j1708_checksum>
 19c:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <_ZL15j1708_tx_buffer>
 1a0:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <_ZL15j1708_tx_buffer+0x1>
 1a4:	e8 0f       	add	r30, r24
 1a6:	f1 1d       	adc	r31, r1
 1a8:	80 81       	ld	r24, Z
 1aa:	89 0f       	add	r24, r25
 1ac:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <j1708_checksum>
 1b0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <j1708_tx_ptr>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <j1708_tx_ptr>
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <__vector_33+0x7e>
 1bc:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <j1708_tx_length>
 1c0:	e9 ec       	ldi	r30, 0xC9	; 201
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	8f 7d       	andi	r24, 0xDF	; 223
 1c8:	80 83       	st	Z, r24
 1ca:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z13send_checksumv>
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <_Z22rx_collision_detectionv>:
 1f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <j1708_collision_counter>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <j1708_collision_counter>
 1fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <j1708_collision_counter>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	69 f4       	brne	.+26     	; 0x21c <_Z22rx_collision_detectionv+0x2c>
 202:	8a e0       	ldi	r24, 0x0A	; 10
 204:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bit_times>
 208:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
 20c:	8f e2       	ldi	r24, 0x2F	; 47
 20e:	86 bd       	out	0x26, r24	; 38
 210:	ee e6       	ldi	r30, 0x6E	; 110
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret
 21c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <j1708_collision_counter>
 220:	87 70       	andi	r24, 0x07	; 7
 222:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bit_times>
 226:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
 22a:	8f e2       	ldi	r24, 0x2F	; 47
 22c:	86 bd       	out	0x26, r24	; 38
 22e:	ee e6       	ldi	r30, 0x6E	; 110
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	81 60       	ori	r24, 0x01	; 1
 236:	80 83       	st	Z, r24
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_end+0x7>
 23e:	08 95       	ret

00000240 <__vector_32>:
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
 262:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 266:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <j1708_rx_temp>
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	11 86       	std	Z+9, r1	; 0x09
 270:	17 82       	std	Z+7, r1	; 0x07
 272:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <j1708_collision_counter>
 276:	80 81       	ld	r24, Z
 278:	88 23       	and	r24, r24
 27a:	41 f0       	breq	.+16     	; 0x28c <__vector_32+0x4c>
 27c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__data_end+0x5>
 280:	88 23       	and	r24, r24
 282:	51 f0       	breq	.+20     	; 0x298 <__vector_32+0x58>
 284:	10 82       	st	Z, r1
 286:	15 82       	std	Z+5, r1	; 0x05
 288:	10 86       	std	Z+8, r1	; 0x08
 28a:	06 c0       	rjmp	.+12     	; 0x298 <__vector_32+0x58>
 28c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x6>
 290:	81 11       	cpse	r24, r1
 292:	02 c0       	rjmp	.+4      	; 0x298 <__vector_32+0x58>
 294:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z22j1708_rx_isr_receivingv>
 298:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_end+0x1>
 29c:	88 23       	and	r24, r24
 29e:	d1 f0       	breq	.+52     	; 0x2d4 <__vector_32+0x94>
 2a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x6>
 2a4:	81 11       	cpse	r24, r1
 2a6:	11 c0       	rjmp	.+34     	; 0x2ca <__vector_32+0x8a>
 2a8:	15 c0       	rjmp	.+42     	; 0x2d4 <__vector_32+0x94>
 2aa:	e0 e0       	ldi	r30, 0x00	; 0
 2ac:	f1 e0       	ldi	r31, 0x01	; 1
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 83       	st	Z, r24
 2b2:	16 82       	std	Z+6, r1	; 0x06
 2b4:	e9 ec       	ldi	r30, 0xC9	; 201
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	80 62       	ori	r24, 0x20	; 32
 2bc:	80 83       	st	Z, r24
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <__vector_32+0x94>
 2c0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end+0x6>
 2c4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z22rx_collision_detectionv>
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <__vector_32+0x94>
 2ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <j1708_rx_temp>
 2ce:	80 38       	cpi	r24, 0x80	; 128
 2d0:	b9 f7       	brne	.-18     	; 0x2c0 <__vector_32+0x80>
 2d2:	eb cf       	rjmp	.-42     	; 0x2aa <__vector_32+0x6a>
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <_Z10j1708_initv>:
 2f6:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <j1708_tx_ptr>
 2fa:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <j1708_tx_length>
 2fe:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <j1708_rx_buffer0_ptr>
 302:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <j1708_rx_buffer0_count>
 306:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <j1708_checksum>
 30a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <j1708_rx_temp>
 30e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <j1708_collision_counter>
 312:	e0 e0       	ldi	r30, 0x00	; 0
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	13 82       	std	Z+3, r1	; 0x03
 318:	11 82       	std	Z+1, r1	; 0x01
 31a:	16 82       	std	Z+6, r1	; 0x06
 31c:	12 86       	std	Z+10, r1	; 0x0a
 31e:	11 86       	std	Z+9, r1	; 0x09
 320:	17 82       	std	Z+7, r1	; 0x07
 322:	10 82       	st	Z, r1
 324:	10 86       	std	Z+8, r1	; 0x08
 326:	15 82       	std	Z+5, r1	; 0x05
 328:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 32c:	87 e6       	ldi	r24, 0x67	; 103
 32e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 332:	e8 ec       	ldi	r30, 0xC8	; 200
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8d 7f       	andi	r24, 0xFD	; 253
 33a:	80 83       	st	Z, r24
 33c:	e9 ec       	ldi	r30, 0xC9	; 201
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	88 e9       	ldi	r24, 0x98	; 152
 342:	80 83       	st	Z, r24
 344:	86 e0       	ldi	r24, 0x06	; 6
 346:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 34a:	80 81       	ld	r24, Z
 34c:	8f 7d       	andi	r24, 0xDF	; 223
 34e:	80 83       	st	Z, r24
 350:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z13config_timer0v>
 354:	78 94       	sei
 356:	08 95       	ret

00000358 <_Z13j1708_tx_datav>:
void j1708_tx_data(){
	
	//bus_status.j1708_tx_busy = 1; // Now tx is busy
	
	// if the receiver is receiving.. or the idle timer is running... the bus is busy
	if(bus_status.j1708_busy){ //|| (UCSR1A>>RXC1)&0x01 ){ // we can't bus busy, // unread data in the receive buffer set
 358:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_end+0x3>
 35c:	81 11       	cpse	r24, r1
 35e:	08 c0       	rjmp	.+16     	; 0x370 <_Z13j1708_tx_datav+0x18>
		return;
	}else{
		UDR1 = j1708_my_mid; // send first MID
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		j1708_checksum = j1708_my_mid; // start checksum calculation 		
 366:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <j1708_checksum>
		bus_status.j1708_MID_sent = 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x6>
 370:	08 95       	ret

00000372 <_Z16handle_times_isrv>:
}

//used to generate an interrupt on the end of a packet AND as a transmit collision retry timer
void handle_times_isr(){
	
	bus_status.j1708_busy = 0; // not busy idle time, 10 bit times
 372:	e0 e0       	ldi	r30, 0x00	; 0
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	13 82       	std	Z+3, r1	; 0x03
	
	if(bus_status.j1708_random_collision_times){// wait pseudo random bit times
 378:	87 81       	ldd	r24, Z+7	; 0x07
 37a:	88 23       	and	r24, r24
 37c:	39 f0       	breq	.+14     	; 0x38c <_Z16handle_times_isrv+0x1a>
		bus_status.j1708_random_collision_times = 0;
 37e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x7>
		j1708_collision_counter = 0; // reset collision counter
 382:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <j1708_collision_counter>
		j1708_tx_data();
 386:	0e 94 ac 01 	call	0x358	; 0x358 <_Z13j1708_tx_datav>
		return;
 38a:	08 95       	ret
	}
		
	if(bus_status.j1708_priority_check_flag){// reach priority delay
 38c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__data_end+0x9>
 390:	88 23       	and	r24, r24
 392:	29 f0       	breq	.+10     	; 0x39e <_Z16handle_times_isrv+0x2c>
		bus_status.j1708_priority_check_flag = 0;
 394:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x9>
		j1708_tx_data();
 398:	0e 94 ac 01 	call	0x358	; 0x358 <_Z13j1708_tx_datav>
		return;
 39c:	08 95       	ret
	}
	
	if(bus_status.j1708_transmitting){ // when are transmitting data bytes
 39e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 3a2:	81 11       	cpse	r24, r1
 3a4:	41 c0       	rjmp	.+130    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		// read nothing
	}else{  // receive packet, end of packet and I can try tx
		// checksum
		if(j1708_checksum==0){ //valid
 3a6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j1708_checksum>
 3aa:	81 11       	cpse	r24, r1
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <_Z16handle_times_isrv+0x42>
			bus_status.j1708_checksum_error = 0;
 3ae:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end+0x4>
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <_Z16handle_times_isrv+0x48>
		}else{//invalid
			bus_status.j1708_checksum_error = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x4>
		}
		
		// save buffer;
		int i;
		for(i=0;i<j1708_rx_buffer0_count;i++){
 3ba:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <j1708_rx_buffer0_count>
 3be:	88 23       	and	r24, r24
 3c0:	89 f0       	breq	.+34     	; 0x3e4 <_Z16handle_times_isrv+0x72>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
			j1708_rx_buff_save[i] = j1708_rx_buffer0[i];
 3c6:	fc 01       	movw	r30, r24
 3c8:	ef 5c       	subi	r30, 0xCF	; 207
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	20 81       	ld	r18, Z
 3ce:	fc 01       	movw	r30, r24
 3d0:	ef 5e       	subi	r30, 0xEF	; 239
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	20 83       	st	Z, r18
			bus_status.j1708_checksum_error = 1;
		}
		
		// save buffer;
		int i;
		for(i=0;i<j1708_rx_buffer0_count;i++){
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <j1708_rx_buffer0_count>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	82 17       	cp	r24, r18
 3e0:	93 07       	cpc	r25, r19
 3e2:	8c f3       	brlt	.-30     	; 0x3c6 <_Z16handle_times_isrv+0x54>
			j1708_rx_buff_save[i] = j1708_rx_buffer0[i];
		}
		len_rx_save = j1708_rx_buffer0_count;
 3e4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <j1708_rx_buffer0_count>
 3e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <len_rx_save>
		
		if(len_rx_save!=0){ // we have a read packet
 3ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <len_rx_save>
 3f0:	88 23       	and	r24, r24
 3f2:	19 f0       	breq	.+6      	; 0x3fa <_Z16handle_times_isrv+0x88>
			bus_status.j1708_finish_read_packet = 1;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end+0xa>
		}
		
		j1708_rx_buffer0_ptr = 0;
 3fa:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <j1708_rx_buffer0_ptr>
		j1708_rx_buffer0_count = 0;
 3fe:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <j1708_rx_buffer0_count>
		
		if (bus_status.j1708_tx_busy){
 402:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_end+0x1>
 406:	88 23       	and	r24, r24
 408:	79 f0       	breq	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			//// need to add priority time 
			count_times = 0;
 40a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
			bit_times = j1708_priority; //priority delay
 40e:	88 e0       	ldi	r24, 0x08	; 8
 410:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bit_times>
			TCNT0=47; //104 us overflow   1 bit tim
 414:	8f e2       	ldi	r24, 0x2F	; 47
 416:	86 bd       	out	0x26, r24	; 38
			TIMSK0|=(1<<TOIE0);//Enable Overflow Interrupt Enable
 418:	ee e6       	ldi	r30, 0x6E	; 110
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	81 60       	ori	r24, 0x01	; 1
 420:	80 83       	st	Z, r24
			bus_status.j1708_priority_check_flag = 1;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__data_end+0x9>
 428:	08 95       	ret

0000042a <__vector_17>:
	TCNT0=47; //104 us overflow   1 bit time
}


ISR(TIMER0_OVF_vect)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
	//This is the interrupt service routine for TIMER0 OVERFLOW Interrupt.
	//CPU automatically call this when TIMER0 overflows.
	//Increment our variable
	TCNT0=47; //104 us overflow   1 bit time
 44c:	8f e2       	ldi	r24, 0x2F	; 47
 44e:	86 bd       	out	0x26, r24	; 38
	
	count_times++;
 450:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count_times>
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count_times>
	if(count_times==bit_times) //reach n bit times
 45a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count_times>
 45e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <bit_times>
 462:	98 13       	cpse	r25, r24
 464:	09 c0       	rjmp	.+18     	; 0x478 <__vector_17+0x4e>
	{
		TIMSK0 &= ~(1<<TOIE0); // disable timer isr
 466:	ee e6       	ldi	r30, 0x6E	; 110
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	8e 7f       	andi	r24, 0xFE	; 254
 46e:	80 83       	st	Z, r24
		count_times = 0;
 470:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
		handle_times_isr(); // then reach 10 bit time idle time
 474:	0e 94 b9 01 	call	0x372	; 0x372 <_Z16handle_times_isrv>
	}
}
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <main>:
uint8_t lentx = 2;
// main
int main(void)
{
	
	uart0_init();
 49a:	0e 94 49 03 	call	0x692	; 0x692 <_Z10uart0_initv>
	j1708_init();
 49e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z10j1708_initv>
		res_rx_uart0 = uart0_rx_buff(uart0_in_buffer,&uart0_in_len);
		//res_rx_j1708 = j1708_read_buffer(j1708_in_buffer,&j1708_in_len);
		if(res_rx_uart0 < 0){
			
		}else{
			uart0_out_buffer[0] = 'A';//uart0_in_len;
 4a2:	03 e5       	ldi	r16, 0x53	; 83
 4a4:	11 e0       	ldi	r17, 0x01	; 1
 4a6:	c1 e4       	ldi	r28, 0x41	; 65
			uart0_out_buffer[1] = 'B';
 4a8:	d2 e4       	ldi	r29, 0x42	; 66
			UDR0 = 'A';
 4aa:	0f 2e       	mov	r0, r31
 4ac:	f6 ec       	ldi	r31, 0xC6	; 198
 4ae:	ef 2e       	mov	r14, r31
 4b0:	f1 2c       	mov	r15, r1
 4b2:	f0 2d       	mov	r31, r0
	int8_t res_rx_uart0 = -1;
	int8_t res_rx_j1708 = -1;
    /* Replace with your application code */
    while (1) 
    {
		res_rx_uart0 = uart0_rx_buff(uart0_in_buffer,&uart0_in_len);
 4b4:	65 e5       	ldi	r22, 0x55	; 85
 4b6:	71 e0       	ldi	r23, 0x01	; 1
 4b8:	86 e5       	ldi	r24, 0x56	; 86
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 1d 03 	call	0x63a	; 0x63a <_Z13uart0_rx_buffPhS_>
		//res_rx_j1708 = j1708_read_buffer(j1708_in_buffer,&j1708_in_len);
		if(res_rx_uart0 < 0){
 4c0:	88 23       	and	r24, r24
 4c2:	c4 f3       	brlt	.-16     	; 0x4b4 <main+0x1a>
			
		}else{
			uart0_out_buffer[0] = 'A';//uart0_in_len;
 4c4:	f8 01       	movw	r30, r16
 4c6:	c0 83       	st	Z, r28
			uart0_out_buffer[1] = 'B';
 4c8:	d1 83       	std	Z+1, r29	; 0x01
			UDR0 = 'A';
 4ca:	f7 01       	movw	r30, r14
 4cc:	c0 83       	st	Z, r28
 4ce:	f2 cf       	rjmp	.-28     	; 0x4b4 <main+0x1a>

000004d0 <__vector_22>:
		//enable UART interrupt
		UCSR0B |= (1 << UDRIE0); //enable sending

		return 0;
	}
}
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	ef 93       	push	r30
 4e0:	ff 93       	push	r31
 4e2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uart0_len_out>
 4e6:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <uart0_ptr_out>
 4ea:	89 17       	cp	r24, r25
 4ec:	e8 f4       	brcc	.+58     	; 0x528 <__vector_22+0x58>
 4ee:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <uart0_ptr_out>
 4f2:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <uart0_buffer_out>
 4f6:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <uart0_buffer_out+0x1>
 4fa:	e8 0f       	add	r30, r24
 4fc:	f1 1d       	adc	r31, r1
 4fe:	80 81       	ld	r24, Z
 500:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 504:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <uart0_ptr_out>
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <uart0_ptr_out>
 50e:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <uart0_ptr_out>
 512:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <uart0_len_out>
 516:	98 13       	cpse	r25, r24
 518:	07 c0       	rjmp	.+14     	; 0x528 <__vector_22+0x58>
 51a:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <uart0_len_out>
 51e:	e1 ec       	ldi	r30, 0xC1	; 193
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	8f 7d       	andi	r24, 0xDF	; 223
 526:	80 83       	st	Z, r24
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <__vector_21>:
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	8f 93       	push	r24
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
 54a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 54e:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <uart0_ptr_in>
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	e9 56       	subi	r30, 0x69	; 105
 556:	fe 4f       	sbci	r31, 0xFE	; 254
 558:	80 83       	st	Z, r24
 55a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <uart0_ptr_in>
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <uart0_ptr_in>
 564:	8f e2       	ldi	r24, 0x2F	; 47
 566:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 56a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <count_tmr2>
 56e:	e0 e7       	ldi	r30, 0x70	; 112
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	81 60       	ori	r24, 0x01	; 1
 576:	80 83       	st	Z, r24
 578:	ff 91       	pop	r31
 57a:	ef 91       	pop	r30
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <_Z23uart0_rx_packet_timeoutv>:
 588:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <uart0_ptr_in>
 58c:	88 23       	and	r24, r24
 58e:	81 f0       	breq	.+32     	; 0x5b0 <_Z23uart0_rx_packet_timeoutv+0x28>
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	82 2f       	mov	r24, r18
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	fc 01       	movw	r30, r24
 598:	e9 56       	subi	r30, 0x69	; 105
 59a:	fe 4f       	sbci	r31, 0xFE	; 254
 59c:	30 81       	ld	r19, Z
 59e:	fc 01       	movw	r30, r24
 5a0:	e9 58       	subi	r30, 0x89	; 137
 5a2:	fe 4f       	sbci	r31, 0xFE	; 254
 5a4:	30 83       	st	Z, r19
 5a6:	2f 5f       	subi	r18, 0xFF	; 255
 5a8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <uart0_ptr_in>
 5ac:	28 17       	cp	r18, r24
 5ae:	88 f3       	brcs	.-30     	; 0x592 <_Z23uart0_rx_packet_timeoutv+0xa>
 5b0:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <uart0_ptr_in>
 5b4:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <uart0_count_in>
 5b8:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <uart0_count_in>
 5bc:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <uart0_rx_len_save>
 5c0:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <uart0_ptr_in>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <flag_finish_rx_packet>
 5ca:	08 95       	ret

000005cc <__vector_10>:
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	4f 93       	push	r20
 5dc:	5f 93       	push	r21
 5de:	6f 93       	push	r22
 5e0:	7f 93       	push	r23
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
 5ee:	8f e2       	ldi	r24, 0x2F	; 47
 5f0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 5f4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <count_tmr2>
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <count_tmr2>
 5fe:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <count_tmr2>
 602:	8a 30       	cpi	r24, 0x0A	; 10
 604:	49 f4       	brne	.+18     	; 0x618 <__vector_10+0x4c>
 606:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <count_tmr2>
 60a:	e0 e7       	ldi	r30, 0x70	; 112
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	8e 7f       	andi	r24, 0xFE	; 254
 612:	80 83       	st	Z, r24
 614:	0e 94 c4 02 	call	0x588	; 0x588 <_Z23uart0_rx_packet_timeoutv>
 618:	ff 91       	pop	r31
 61a:	ef 91       	pop	r30
 61c:	bf 91       	pop	r27
 61e:	af 91       	pop	r26
 620:	9f 91       	pop	r25
 622:	8f 91       	pop	r24
 624:	7f 91       	pop	r23
 626:	6f 91       	pop	r22
 628:	5f 91       	pop	r21
 62a:	4f 91       	pop	r20
 62c:	3f 91       	pop	r19
 62e:	2f 91       	pop	r18
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <_Z13uart0_rx_buffPhS_>:


int8_t uart0_rx_buff(uint8_t* buff_rx, uint8_t* len_rx){ // receive from serial port
 63a:	dc 01       	movw	r26, r24
	if(flag_finish_rx_packet){ //packet complete
 63c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <flag_finish_rx_packet>
 640:	88 23       	and	r24, r24
 642:	e1 f0       	breq	.+56     	; 0x67c <_Z13uart0_rx_buffPhS_+0x42>
		flag_finish_rx_packet = 0; // just clear flag
 644:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <flag_finish_rx_packet>
		uint8_t kk;
		for(kk=0;kk<uart0_rx_len_save;kk++){
 648:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <uart0_rx_len_save>
 64c:	88 23       	and	r24, r24
 64e:	81 f0       	breq	.+32     	; 0x670 <_Z13uart0_rx_buffPhS_+0x36>
 650:	90 e0       	ldi	r25, 0x00	; 0
			buff_rx[kk]=uart0_rx_save[kk]; //transfer buffer
 652:	29 2f       	mov	r18, r25
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	f9 01       	movw	r30, r18
 658:	e9 58       	subi	r30, 0x89	; 137
 65a:	fe 4f       	sbci	r31, 0xFE	; 254
 65c:	40 81       	ld	r20, Z
 65e:	fd 01       	movw	r30, r26
 660:	e2 0f       	add	r30, r18
 662:	f3 1f       	adc	r31, r19
 664:	40 83       	st	Z, r20

int8_t uart0_rx_buff(uint8_t* buff_rx, uint8_t* len_rx){ // receive from serial port
	if(flag_finish_rx_packet){ //packet complete
		flag_finish_rx_packet = 0; // just clear flag
		uint8_t kk;
		for(kk=0;kk<uart0_rx_len_save;kk++){
 666:	9f 5f       	subi	r25, 0xFF	; 255
 668:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <uart0_rx_len_save>
 66c:	92 17       	cp	r25, r18
 66e:	88 f3       	brcs	.-30     	; 0x652 <_Z13uart0_rx_buffPhS_+0x18>
			buff_rx[kk]=uart0_rx_save[kk]; //transfer buffer
		}
		*len_rx = uart0_rx_len_save; // transfer len of buffer
 670:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <uart0_rx_len_save>
 674:	fb 01       	movw	r30, r22
 676:	80 83       	st	Z, r24
		return 0;
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret
	}else{ // cant read buff try again later;
		return -1;
 67c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
 67e:	08 95       	ret

00000680 <_Z13config_timer2v>:


// config timer2
void config_timer2(void){
	// Pre scaler = FCPU/8
	TCCR2A |= (1<<CS21);
 680:	e0 eb       	ldi	r30, 0xB0	; 176
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	82 60       	ori	r24, 0x02	; 2
 688:	80 83       	st	Z, r24
	//Enable Overflow Interrupt Enable
	//TIMSK2|=(1<<TOIE2);
	
	//Initialize Counter
	TCNT2=47; //104 us overflow   1 bit time
 68a:	8f e2       	ldi	r24, 0x2F	; 47
 68c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 690:	08 95       	ret

00000692 <_Z10uart0_initv>:

}


void uart0_init(void) {
	UBRR0H = UBRRH_VALUE;
 692:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 696:	87 e6       	ldi	r24, 0x67	; 103
 698:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	uart0_len_out = 0;
 69c:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <uart0_len_out>
	uart0_ptr_out = 0;
 6a0:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <uart0_ptr_out>
	uart0_rx_len_save = 0;
 6a4:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <uart0_rx_len_save>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 6a8:	e0 ec       	ldi	r30, 0xC0	; 192
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	8d 7f       	andi	r24, 0xFD	; 253
 6b0:	80 83       	st	Z, r24
	#endif

	
	UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);   /* Enable RX and TX, RX complete ISR */
 6b2:	e1 ec       	ldi	r30, 0xC1	; 193
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	88 e9       	ldi	r24, 0x98	; 152
 6b8:	80 83       	st	Z, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data, 1 stop bit, no parity, asynchronous UART*/
 6ba:	86 e0       	ldi	r24, 0x06	; 6
 6bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

	UCSR0B &= ~(1 << UDRIE0); //Disable sending, ready TX buffer
 6c0:	80 81       	ld	r24, Z
 6c2:	8f 7d       	andi	r24, 0xDF	; 223
 6c4:	80 83       	st	Z, r24

	//set_sleep_mode(SLEEP_MODE_IDLE);
	//enable global interrupt
	config_timer2();
 6c6:	0e 94 40 03 	call	0x680	; 0x680 <_Z13config_timer2v>
	sei();
 6ca:	78 94       	sei
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
