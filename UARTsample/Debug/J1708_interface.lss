
J1708_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004b8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800108  00800108  00000554  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b3  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d23  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000768  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00002ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e9  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c1  00000000  00000000  0000383d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_10>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_17>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_21>
  58:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_22>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_32>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_33>
  88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 eb       	ldi	r30, 0xB8	; 184
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a8 30       	cpi	r26, 0x08	; 8
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a8 e0       	ldi	r26, 0x08	; 8
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a1 3b       	cpi	r26, 0xB1	; 177
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  ca:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <__vector_33>:
		*len_rx = uart1_rx_len_save; // transfer len of buffer
		return 0;
	}else{ // cant read buff try again later;
		return -1;
	}
}
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
  e4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <uart1_len_out>
  e8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <uart1_ptr_out>
  ec:	89 17       	cp	r24, r25
  ee:	88 f4       	brcc	.+34     	; 0x112 <__vector_33+0x40>
  f0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <uart1_ptr_out>
  f4:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <uart1_buffer_out>
  f8:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <uart1_buffer_out+0x1>
  fc:	e8 0f       	add	r30, r24
  fe:	f1 1d       	adc	r31, r1
 100:	80 81       	ld	r24, Z
 102:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 106:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <uart1_ptr_out>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <uart1_ptr_out>
 110:	07 c0       	rjmp	.+14     	; 0x120 <__vector_33+0x4e>
 112:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <uart1_len_out>
 116:	e9 ec       	ldi	r30, 0xC9	; 201
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8f 7d       	andi	r24, 0xDF	; 223
 11e:	80 83       	st	Z, r24
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_32>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
 142:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 146:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <uart1_ptr_in>
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	e5 5d       	subi	r30, 0xD5	; 213
 14e:	fe 4f       	sbci	r31, 0xFE	; 254
 150:	80 83       	st	Z, r24
 152:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <uart1_ptr_in>
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <uart1_ptr_in>
 15c:	8f e2       	ldi	r24, 0x2F	; 47
 15e:	86 bd       	out	0x26, r24	; 38
 160:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 164:	ee e6       	ldi	r30, 0x6E	; 110
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	80 83       	st	Z, r24
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <_Z23uart1_rx_packet_timeoutv>:
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <flag_finish_rx_packet_2>
 184:	ee e6       	ldi	r30, 0x6E	; 110
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	80 83       	st	Z, r24
 18e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <uart1_ptr_in>
 192:	88 23       	and	r24, r24
 194:	89 f0       	breq	.+34     	; 0x1b8 <_Z23uart1_rx_packet_timeoutv+0x3a>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	e5 5d       	subi	r30, 0xD5	; 213
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	20 81       	ld	r18, Z
 1a2:	fc 01       	movw	r30, r24
 1a4:	e5 5f       	subi	r30, 0xF5	; 245
 1a6:	fe 4f       	sbci	r31, 0xFE	; 254
 1a8:	20 83       	st	Z, r18
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <uart1_ptr_in>
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	82 17       	cp	r24, r18
 1b4:	93 07       	cpc	r25, r19
 1b6:	8c f3       	brlt	.-30     	; 0x19a <_Z23uart1_rx_packet_timeoutv+0x1c>
 1b8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <uart1_ptr_in>
 1bc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <uart1_count_in>
 1c0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <uart1_count_in>
 1c4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <uart1_rx_len_save>
 1c8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <uart1_ptr_in>
 1cc:	08 95       	ret

000001ce <__vector_17>:
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
 1f0:	8f e2       	ldi	r24, 0x2F	; 47
 1f2:	86 bd       	out	0x26, r24	; 38
 1f4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 1fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 202:	8a 30       	cpi	r24, 0x0A	; 10
 204:	21 f4       	brne	.+8      	; 0x20e <__vector_17+0x40>
 206:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 20a:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z23uart1_rx_packet_timeoutv>
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <_Z13uart1_tx_buffPhh>:
 230:	9c 01       	movw	r18, r24
 232:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <uart1_len_out>
 236:	91 11       	cpse	r25, r1
 238:	0f c0       	rjmp	.+30     	; 0x258 <_Z13uart1_tx_buffPhh+0x28>
 23a:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <uart1_len_out>
 23e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <uart1_ptr_out>
 242:	30 93 4a 01 	sts	0x014A, r19	; 0x80014a <uart1_buffer_out+0x1>
 246:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <uart1_buffer_out>
 24a:	e9 ec       	ldi	r30, 0xC9	; 201
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	80 62       	ori	r24, 0x20	; 32
 252:	80 83       	st	Z, r24
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	08 95       	ret

0000025c <_Z15config_timer0_2v>:


// config timer2
void config_timer0_2(void){
	// Pre scaler = FCPU/8
	TCCR0A |= (1<<CS01);
 25c:	84 b5       	in	r24, 0x24	; 36
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	84 bd       	out	0x24, r24	; 36
	//Enable Overflow Interrupt Enable
	//TIMSK2|=(1<<TOIE2);
	
	//Initialize Counter
	TCNT0=47; //104 us overflow   1 bit time
 262:	8f e2       	ldi	r24, 0x2F	; 47
 264:	86 bd       	out	0x26, r24	; 38
 266:	08 95       	ret

00000268 <_Z10uart1_initv>:

}


void uart1_init(void) {
	UBRR1H = UBRRH_VALUE;
 268:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = UBRRL_VALUE;
 26c:	87 e6       	ldi	r24, 0x67	; 103
 26e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	uart1_len_out = 0;
 272:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <uart1_len_out>
	uart1_ptr_out = 0;
 276:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <uart1_ptr_out>

	#if USE_2X
	UCSR1A |= _BV(U2X1);
	#else
	UCSR1A &= ~(_BV(U2X1));
 27a:	e8 ec       	ldi	r30, 0xC8	; 200
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
	#endif

	
	UCSR1B = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);   /* Enable RX and TX, RX complete ISR */
 284:	e9 ec       	ldi	r30, 0xC9	; 201
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	88 e9       	ldi	r24, 0x98	; 152
 28a:	80 83       	st	Z, r24
	UCSR1C = _BV(UCSZ11) | _BV(UCSZ10); /* 8-bit data, 1 stop bit, no parity, asynchronous UART*/
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	UCSR1B &= ~(1 << UDRIE1); //Disable sending, ready TX buffer
 292:	80 81       	ld	r24, Z
 294:	8f 7d       	andi	r24, 0xDF	; 223
 296:	80 83       	st	Z, r24

	//set_sleep_mode(SLEEP_MODE_IDLE);
	//enable global interrupt
	config_timer0_2();
 298:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z15config_timer0_2v>
	sei();
 29c:	78 94       	sei
 29e:	08 95       	ret

000002a0 <main>:

// main
int main(void)
{
	//j1708_init();
	uart0_init();
 2a0:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z10uart0_initv>
	uart1_init();
 2a4:	0e 94 34 01 	call	0x268	; 0x268 <_Z10uart1_initv>
	int8_t res_rx_uart0;
	//int8_t res_rx_j1708;
    /* Replace with your application code */
    while (1) 
    {
		res_rx_uart0 = uart0_rx_buff(uart0_in_buffer,&uart0_in_len);
 2a8:	6d e4       	ldi	r22, 0x4D	; 77
 2aa:	71 e0       	ldi	r23, 0x01	; 1
 2ac:	8e e4       	ldi	r24, 0x4E	; 78
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 13 02 	call	0x426	; 0x426 <_Z13uart0_rx_buffPhS_>
		//res_rx_j1708 = j1708_read_buffer(j1708_in_buffer,&j1708_in_len);
	  
		if(res_rx_uart0 < 0){
 2b4:	88 23       	and	r24, r24
 2b6:	c4 f3       	brlt	.-16     	; 0x2a8 <main+0x8>
			//error we dont have a complete rx packet yet, try later
		}else{
			//j1708_send_packet(uart0_in_buffer,uart0_in_len); // shedule send packet to j1708 bus;
			uart1_tx_buff(uart0_in_buffer_2, 7);
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 18 01 	call	0x230	; 0x230 <_Z13uart1_tx_buffPhh>
 2c2:	f2 cf       	rjmp	.-28     	; 0x2a8 <main+0x8>

000002c4 <__vector_22>:
		//enable UART interrupt
		UCSR0B |= (1 << UDRIE0); //enable sending

		return 0;
	}
}
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <uart0_len_out>
 2da:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <uart0_ptr_out>
 2de:	89 17       	cp	r24, r25
 2e0:	88 f4       	brcc	.+34     	; 0x304 <__vector_22+0x40>
 2e2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <uart0_ptr_out>
 2e6:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <uart0_buffer_out>
 2ea:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <uart0_buffer_out+0x1>
 2ee:	e8 0f       	add	r30, r24
 2f0:	f1 1d       	adc	r31, r1
 2f2:	80 81       	ld	r24, Z
 2f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2f8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <uart0_ptr_out>
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <uart0_ptr_out>
 302:	07 c0       	rjmp	.+14     	; 0x312 <__vector_22+0x4e>
 304:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <uart0_len_out>
 308:	e1 ec       	ldi	r30, 0xC1	; 193
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	8f 7d       	andi	r24, 0xDF	; 223
 310:	80 83       	st	Z, r24
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <__vector_21>:
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	8f 93       	push	r24
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
 334:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 338:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <uart0_ptr_in>
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	e1 57       	subi	r30, 0x71	; 113
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	80 83       	st	Z, r24
 344:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <uart0_ptr_in>
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <uart0_ptr_in>
 34e:	8f e2       	ldi	r24, 0x2F	; 47
 350:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 354:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <count_tmr2>
 358:	e0 e7       	ldi	r30, 0x70	; 112
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	80 83       	st	Z, r24
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <_Z23uart0_rx_packet_timeoutv>:
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <flag_finish_rx_packet>
 378:	e0 e7       	ldi	r30, 0x70	; 112
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	8e 7f       	andi	r24, 0xFE	; 254
 380:	80 83       	st	Z, r24
 382:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <uart0_ptr_in>
 386:	88 23       	and	r24, r24
 388:	89 f0       	breq	.+34     	; 0x3ac <_Z23uart0_rx_packet_timeoutv+0x3a>
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	fc 01       	movw	r30, r24
 390:	e1 57       	subi	r30, 0x71	; 113
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	20 81       	ld	r18, Z
 396:	fc 01       	movw	r30, r24
 398:	e1 59       	subi	r30, 0x91	; 145
 39a:	fe 4f       	sbci	r31, 0xFE	; 254
 39c:	20 83       	st	Z, r18
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <uart0_ptr_in>
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	82 17       	cp	r24, r18
 3a8:	93 07       	cpc	r25, r19
 3aa:	8c f3       	brlt	.-30     	; 0x38e <_Z23uart0_rx_packet_timeoutv+0x1c>
 3ac:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <uart0_ptr_in>
 3b0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <uart0_count_in>
 3b4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <uart0_count_in>
 3b8:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <uart0_rx_len_save>
 3bc:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <uart0_ptr_in>
 3c0:	08 95       	ret

000003c2 <__vector_10>:
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	2f 93       	push	r18
 3ce:	3f 93       	push	r19
 3d0:	4f 93       	push	r20
 3d2:	5f 93       	push	r21
 3d4:	6f 93       	push	r22
 3d6:	7f 93       	push	r23
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	af 93       	push	r26
 3de:	bf 93       	push	r27
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
 3e4:	8f e2       	ldi	r24, 0x2F	; 47
 3e6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 3ea:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <count_tmr2>
 3ee:	8f 5f       	subi	r24, 0xFF	; 255
 3f0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <count_tmr2>
 3f4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <count_tmr2>
 3f8:	8a 30       	cpi	r24, 0x0A	; 10
 3fa:	21 f4       	brne	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fc:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <count_tmr2>
 400:	0e 94 b9 01 	call	0x372	; 0x372 <_Z23uart0_rx_packet_timeoutv>
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <_Z13uart0_rx_buffPhS_>:


int8_t uart0_rx_buff(uint8_t* buff_rx, uint8_t* len_rx){ // receive from serial port
	if(flag_finish_rx_packet){ //packet complete
 426:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <flag_finish_rx_packet>
 42a:	22 23       	and	r18, r18
 42c:	e1 f0       	breq	.+56     	; 0x466 <_Z13uart0_rx_buffPhS_+0x40>
		flag_finish_rx_packet = 0; // just clear flag
 42e:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <flag_finish_rx_packet>
		int i;
		for(i=0;i<uart0_rx_len_save;i++){
 432:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <uart0_rx_len_save>
 436:	22 23       	and	r18, r18
 438:	81 f0       	breq	.+32     	; 0x45a <_Z13uart0_rx_buffPhS_+0x34>
 43a:	e8 2f       	mov	r30, r24
 43c:	f9 2f       	mov	r31, r25
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
			buff_rx[i]=uart0_rx_save[i]; //transfer buffer
 442:	dc 01       	movw	r26, r24
 444:	a1 59       	subi	r26, 0x91	; 145
 446:	be 4f       	sbci	r27, 0xFE	; 254
 448:	2c 91       	ld	r18, X
 44a:	21 93       	st	Z+, r18

int8_t uart0_rx_buff(uint8_t* buff_rx, uint8_t* len_rx){ // receive from serial port
	if(flag_finish_rx_packet){ //packet complete
		flag_finish_rx_packet = 0; // just clear flag
		int i;
		for(i=0;i<uart0_rx_len_save;i++){
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <uart0_rx_len_save>
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	82 17       	cp	r24, r18
 456:	93 07       	cpc	r25, r19
 458:	a4 f3       	brlt	.-24     	; 0x442 <_Z13uart0_rx_buffPhS_+0x1c>
			buff_rx[i]=uart0_rx_save[i]; //transfer buffer
		}
		*len_rx = uart0_rx_len_save; // transfer len of buffer
 45a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <uart0_rx_len_save>
 45e:	fb 01       	movw	r30, r22
 460:	80 83       	st	Z, r24
		return 0;
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	08 95       	ret
	}else{ // cant read buff try again later;
		return -1;
 466:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
 468:	08 95       	ret

0000046a <_Z13config_timer2v>:


// config timer2
void config_timer2(void){
	// Pre scaler = FCPU/8
	TCCR2A |= (1<<CS21);
 46a:	e0 eb       	ldi	r30, 0xB0	; 176
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	82 60       	ori	r24, 0x02	; 2
 472:	80 83       	st	Z, r24
	//Enable Overflow Interrupt Enable
	//TIMSK2|=(1<<TOIE2);
	
	//Initialize Counter
	TCNT2=47; //104 us overflow   1 bit time
 474:	8f e2       	ldi	r24, 0x2F	; 47
 476:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 47a:	08 95       	ret

0000047c <_Z10uart0_initv>:

}


void uart0_init(void) {
	UBRR0H = UBRRH_VALUE;
 47c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 480:	87 e6       	ldi	r24, 0x67	; 103
 482:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	uart0_len_out = 0;
 486:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <uart0_len_out>
	uart0_ptr_out = 0;
 48a:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <uart0_ptr_out>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 48e:	e0 ec       	ldi	r30, 0xC0	; 192
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	8d 7f       	andi	r24, 0xFD	; 253
 496:	80 83       	st	Z, r24
	#endif

	
	UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);   /* Enable RX and TX, RX complete ISR */
 498:	e1 ec       	ldi	r30, 0xC1	; 193
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	88 e9       	ldi	r24, 0x98	; 152
 49e:	80 83       	st	Z, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data, 1 stop bit, no parity, asynchronous UART*/
 4a0:	86 e0       	ldi	r24, 0x06	; 6
 4a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

	UCSR0B &= ~(1 << UDRIE0); //Disable sending, ready TX buffer
 4a6:	80 81       	ld	r24, Z
 4a8:	8f 7d       	andi	r24, 0xDF	; 223
 4aa:	80 83       	st	Z, r24

	//set_sleep_mode(SLEEP_MODE_IDLE);
	//enable global interrupt
	config_timer2();
 4ac:	0e 94 35 02 	call	0x46a	; 0x46a <_Z13config_timer2v>
	sei();
 4b0:	78 94       	sei
 4b2:	08 95       	ret

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>
