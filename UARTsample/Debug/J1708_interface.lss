
J1708_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  00800100  00800100  00000766  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001329  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6d  00000000  00000000  00001bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009bf  00000000  00000000  00002962  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a94  00000000  00000000  0000361c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b3  00000000  00000000  000040b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004663  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_10>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_17>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_21>
  58:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_22>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_32>
  84:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_33>
  88:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a7 3b       	cpi	r26, 0xB7	; 183
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  b4:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <_Z13config_timer0v>:



void config_timer0(void){
	// Prescaler = FCPU/8
	TCCR0A |= (1<<CS01);//(1<<CS02) | (1<<CS00);
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	84 bd       	out	0x24, r24	; 36
	//sei();	
	TIMSK0 &= ~(1<<TOIE0);
  c2:	ee e6       	ldi	r30, 0x6E	; 110
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	80 83       	st	Z, r24
	TCNT0=47; //104 us overflow   1 bit time
  cc:	8f e2       	ldi	r24, 0x2F	; 47
  ce:	86 bd       	out	0x26, r24	; 38
  d0:	08 95       	ret

000000d2 <_Z22j1708_rx_isr_receivingv>:
}

void j1708_rx_isr_receiving(){
	
	
	bus_status.j1708_busy = 1; // the receiver is now busy
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>

	// reset end idle time
	count_times = 0;
  d8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
	bit_times = 10; //reset the end-of-packet
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bit_times>
	TCNT0=47; //104 us overflow   1 bit tim
  e2:	8f e2       	ldi	r24, 0x2F	; 47
  e4:	86 bd       	out	0x26, r24	; 38
	TIMSK0|=(1<<TOIE0);//Enable Overflow Interrupt Enable
  e6:	ee e6       	ldi	r30, 0x6E	; 110
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24
	
	
	// no limit of bytes to received
	j1708_rx_buffer0[j1708_rx_buffer0_ptr] = j1708_rx_temp;
  f0:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <j1708_rx_buffer0_ptr>
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <j1708_rx_temp>
  fa:	ef 5c       	subi	r30, 0xCF	; 207
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	80 83       	st	Z, r24
	j1708_rx_buffer0_count++; //count number of bytes on buffer
 100:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <j1708_rx_buffer0_count>
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <j1708_rx_buffer0_count>
	j1708_rx_buffer0_ptr++;
 10a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <j1708_rx_buffer0_ptr>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <j1708_rx_buffer0_ptr>
	// add to checksum
	j1708_checksum += j1708_rx_temp;
 114:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <j1708_rx_temp>
 118:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j1708_checksum>
 11c:	89 0f       	add	r24, r25
 11e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <j1708_checksum>
 122:	08 95       	ret

00000124 <_Z13send_checksumv>:



void send_checksum(){
	uint8_t cs;
	cs = ~(j1708_checksum);
 124:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j1708_checksum>
	cs += 1;
 128:	81 95       	neg	r24
	UDR1 = cs; // send checksum
 12a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	
	//UCSR1B &= ~(1 << UDRIE1);  //disable TX isr 
	//UCSR1B &= ~(1 << RXEN1);  //enable RX isr
	
	bus_status.j1708_tx_busy = 0; // tx queue is now empty
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	11 82       	std	Z+1, r1	; 0x01
	bus_status.j1708_tx_sent_checksum = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	85 83       	std	Z+5, r24	; 0x05
 138:	08 95       	ret

0000013a <__vector_33>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(USART1_UDRE_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	if(j1708_tx_length > j1708_tx_ptr){
 15c:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <j1708_tx_length>
 160:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <j1708_tx_ptr>
 164:	89 17       	cp	r24, r25
 166:	f8 f4       	brcc	.+62     	; 0x1a6 <__vector_33+0x6c>
		UDR1 = j1708_tx_buffer[j1708_tx_ptr];
 168:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <j1708_tx_ptr>
 16c:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <_ZL15j1708_tx_buffer>
 170:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <_ZL15j1708_tx_buffer+0x1>
 174:	e8 0f       	add	r30, r24
 176:	f1 1d       	adc	r31, r1
 178:	80 81       	ld	r24, Z
 17a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		j1708_checksum += j1708_tx_buffer[j1708_tx_ptr]; // add to checksum
 17e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <j1708_tx_ptr>
 182:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <j1708_checksum>
 186:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <_ZL15j1708_tx_buffer>
 18a:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <_ZL15j1708_tx_buffer+0x1>
 18e:	e8 0f       	add	r30, r24
 190:	f1 1d       	adc	r31, r1
 192:	80 81       	ld	r24, Z
 194:	89 0f       	add	r24, r25
 196:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <j1708_checksum>
		j1708_tx_ptr++;
 19a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <j1708_tx_ptr>
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <j1708_tx_ptr>
 1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <__vector_33+0x7e>
	} else {
		j1708_tx_length = 0;
 1a6:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <j1708_tx_length>
		//disable sending interrupt
		UCSR1B &= ~(1 << UDRIE1); //Disable sending
 1aa:	e9 ec       	ldi	r30, 0xC9	; 201
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8f 7d       	andi	r24, 0xDF	; 223
 1b2:	80 83       	st	Z, r24
		
		send_checksum();
 1b4:	0e 94 92 00 	call	0x124	; 0x124 <_Z13send_checksumv>
	}
	
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_Z22rx_collision_detectionv>:



void rx_collision_detection(){
	
	j1708_collision_counter ++; // count # collisions
 1da:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <j1708_collision_counter>
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <j1708_collision_counter>
	
	if(j1708_collision_counter==1){//first collision then wait 10 bit times again + priority bit times
 1e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <j1708_collision_counter>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	69 f4       	brne	.+26     	; 0x206 <_Z22rx_collision_detectionv+0x2c>
		bit_times = 10;
 1ec:	8a e0       	ldi	r24, 0x0A	; 10
 1ee:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bit_times>
		count_times = 0;
 1f2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
		TCNT0=47; //104 us overflow   1 bit time
 1f6:	8f e2       	ldi	r24, 0x2F	; 47
 1f8:	86 bd       	out	0x26, r24	; 38
		TIMSK0|=(1<<TOIE0);//Enable Overflow Interrupt Enable
 1fa:	ee e6       	ldi	r30, 0x6E	; 110
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	81 60       	ori	r24, 0x01	; 1
 202:	80 83       	st	Z, r24
 204:	08 95       	ret
	}else{
		//random number generate ;
		bit_times = j1708_collision_counter & 0x07; //random time from 1 - 7
 206:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <j1708_collision_counter>
 20a:	87 70       	andi	r24, 0x07	; 7
 20c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bit_times>
		count_times = 0;
 210:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
		TCNT0=47; //104 us overflow   1 bit time
 214:	8f e2       	ldi	r24, 0x2F	; 47
 216:	86 bd       	out	0x26, r24	; 38
		TIMSK0|=(1<<TOIE0);//Enable Overflow Interrupt Enable
 218:	ee e6       	ldi	r30, 0x6E	; 110
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	80 83       	st	Z, r24
		
		bus_status.j1708_random_collision_times = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_edata+0x7>
 228:	08 95       	ret

0000022a <__vector_32>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(USART1_RX_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	
	uint8_t temp;
	temp = UDR1; // read buffer
 24c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	j1708_rx_temp = temp; // save on temp
 250:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <j1708_rx_temp>

	
	bus_status.j1708_priority_check_flag = 0; // clear priority check
 254:	e0 e0       	ldi	r30, 0x00	; 0
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	11 86       	std	Z+9, r1	; 0x09
	bus_status.j1708_random_collision_times = 0;//clear collision flag
 25a:	17 82       	std	Z+7, r1	; 0x07
	j1708_collision_counter = 0; // reset collision counter
 25c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <j1708_collision_counter>
	
	// transmitting indicate idle bus has reached end we are tx MID+data
	if (bus_status.j1708_transmitting){ //  yes, so we must..
 260:	80 81       	ld	r24, Z
 262:	88 23       	and	r24, r24
 264:	41 f0       	breq	.+16     	; 0x276 <__vector_32+0x4c>
		
		if(bus_status.j1708_tx_sent_checksum){
 266:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_edata+0x5>
 26a:	88 23       	and	r24, r24
 26c:	51 f0       	breq	.+20     	; 0x282 <__vector_32+0x58>
			bus_status.j1708_transmitting = 0; // clear flag tx
 26e:	10 82       	st	Z, r1
			bus_status.j1708_tx_sent_checksum = 0; // clear flag checksum
 270:	15 82       	std	Z+5, r1	; 0x05
			
			bus_status.j1708_wait_idle_time = 0;
 272:	10 86       	std	Z+8, r1	; 0x08
 274:	06 c0       	rjmp	.+12     	; 0x282 <__vector_32+0x58>
		}
		
	}else{ // no, so go receive this data
		if(bus_status.j1708_MID_sent==0){
 276:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_edata+0x6>
 27a:	81 11       	cpse	r24, r1
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__vector_32+0x58>
			j1708_rx_isr_receiving();
 27e:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z22j1708_rx_isr_receivingv>
		}
	}
	
	if(bus_status.j1708_tx_busy && bus_status.j1708_MID_sent){ // MID was sent for j1708_tx_data()
 282:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 286:	88 23       	and	r24, r24
 288:	d1 f0       	breq	.+52     	; 0x2be <__vector_32+0x94>
 28a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_edata+0x6>
 28e:	81 11       	cpse	r24, r1
 290:	11 c0       	rjmp	.+34     	; 0x2b4 <__vector_32+0x8a>
 292:	15 c0       	rjmp	.+42     	; 0x2be <__vector_32+0x94>
		//need to check if is correct
		if(j1708_rx_temp == j1708_my_mid){ // then we are trasnmitting, check if MID is the same
			bus_status.j1708_transmitting = 1;
 294:	e0 e0       	ldi	r30, 0x00	; 0
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 83       	st	Z, r24
			bus_status.j1708_MID_sent = 0; 
 29c:	16 82       	std	Z+6, r1	; 0x06
			UCSR1B |= (1 << UDRIE1); //enable Tx interrupt, enable sending
 29e:	e9 ec       	ldi	r30, 0xC9	; 201
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	80 62       	ori	r24, 0x20	; 32
 2a6:	80 83       	st	Z, r24
 2a8:	0a c0       	rjmp	.+20     	; 0x2be <__vector_32+0x94>
		}else{
			bus_status.j1708_MID_sent = 0; 
 2aa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_edata+0x6>
			rx_collision_detection();
 2ae:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z22rx_collision_detectionv>
		}
	}

}
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <__vector_32+0x94>
		}
	}
	
	if(bus_status.j1708_tx_busy && bus_status.j1708_MID_sent){ // MID was sent for j1708_tx_data()
		//need to check if is correct
		if(j1708_rx_temp == j1708_my_mid){ // then we are trasnmitting, check if MID is the same
 2b4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <j1708_rx_temp>
 2b8:	80 38       	cpi	r24, 0x80	; 128
 2ba:	b9 f7       	brne	.-18     	; 0x2aa <__vector_32+0x80>
 2bc:	eb cf       	rjmp	.-42     	; 0x294 <__vector_32+0x6a>
			bus_status.j1708_MID_sent = 0; 
			rx_collision_detection();
		}
	}

}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <_Z10j1708_initv>:



void j1708_init(void) { // init uart1, rx interrupt enable and tx interrupt disable
	
	j1708_tx_ptr = 0;
 2e0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <j1708_tx_ptr>
	j1708_tx_length = 0;
 2e4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <j1708_tx_length>
	j1708_rx_buffer0_ptr = 0;
 2e8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <j1708_rx_buffer0_ptr>
	j1708_rx_buffer0_count = 0;
 2ec:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <j1708_rx_buffer0_count>
	j1708_checksum = 0;
 2f0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <j1708_checksum>
	j1708_rx_temp = 0;
 2f4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <j1708_rx_temp>
	j1708_collision_counter = 0;
 2f8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <j1708_collision_counter>
	
	bus_status.j1708_busy = 0;
 2fc:	e0 e0       	ldi	r30, 0x00	; 0
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	13 82       	std	Z+3, r1	; 0x03
	bus_status.j1708_tx_busy = 0;
 302:	11 82       	std	Z+1, r1	; 0x01
	bus_status.j1708_MID_sent = 0;
 304:	16 82       	std	Z+6, r1	; 0x06
	bus_status.j1708_finish_read_packet = 0;
 306:	12 86       	std	Z+10, r1	; 0x0a
	bus_status.j1708_priority_check_flag = 0;
 308:	11 86       	std	Z+9, r1	; 0x09
	bus_status.j1708_random_collision_times = 0;
 30a:	17 82       	std	Z+7, r1	; 0x07
	bus_status.j1708_transmitting = 0;
 30c:	10 82       	st	Z, r1
	bus_status.j1708_wait_idle_time = 0;
 30e:	10 86       	std	Z+8, r1	; 0x08
	bus_status.j1708_tx_sent_checksum = 0;
 310:	15 82       	std	Z+5, r1	; 0x05
	
	//init uart1 
	UBRR1H = UBRRH_VALUE;
 312:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = UBRRL_VALUE;
 316:	87 e6       	ldi	r24, 0x67	; 103
 318:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

	#if USE_2X
	UCSR1A |= _BV(U2X1);
	#else
	UCSR1A &= ~(_BV(U2X1));
 31c:	e8 ec       	ldi	r30, 0xC8	; 200
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	8d 7f       	andi	r24, 0xFD	; 253
 324:	80 83       	st	Z, r24
	#endif

	
	UCSR1B = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);   /* Enable RX and TX, RX complete ISR */
 326:	e9 ec       	ldi	r30, 0xC9	; 201
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	88 e9       	ldi	r24, 0x98	; 152
 32c:	80 83       	st	Z, r24
	UCSR1C = _BV(UCSZ11) | _BV(UCSZ10); /* 8-bit data, 1 stop bit, no parity, asynchronous UART*/
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	UCSR1B &= ~(1 << UDRIE1); //Disable sending, ready TX buffer
 334:	80 81       	ld	r24, Z
 336:	8f 7d       	andi	r24, 0xDF	; 223
 338:	80 83       	st	Z, r24


	config_timer0();
 33a:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z13config_timer0v>
	//enable global interrupt
	sei();
 33e:	78 94       	sei
 340:	08 95       	ret

00000342 <_Z17j1708_send_packetPhh>:

/*
*	j1708_send_packet
*	load data into j1708_tx_buffer, and length of data not include MID byte, scheduled
*/
void j1708_send_packet(uint8_t* buffer, uint8_t len){ // load data into j1708_tx_buffer
 342:	9c 01       	movw	r18, r24
	
	if(bus_status.j1708_tx_busy == 0){ // not busy tx 
 344:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 348:	91 11       	cpse	r25, r1
 34a:	24 c0       	rjmp	.+72     	; 0x394 <_Z17j1708_send_packetPhh+0x52>
		
		j1708_tx_length = len;
 34c:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <j1708_tx_length>
		j1708_tx_ptr = 0;
 350:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <j1708_tx_ptr>
		j1708_tx_buffer = buffer;
 354:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <_ZL15j1708_tx_buffer+0x1>
 358:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <_ZL15j1708_tx_buffer>
		
		if ((bus_status.j1708_wait_idle_time==0) && (bus_status.j1708_busy==0)){
 35c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_edata+0x8>
 360:	81 11       	cpse	r24, r1
 362:	04 c0       	rjmp	.+8      	; 0x36c <_Z17j1708_send_packetPhh+0x2a>
 364:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 368:	88 23       	and	r24, r24
 36a:	21 f0       	breq	.+8      	; 0x374 <_Z17j1708_send_packetPhh+0x32>
			TIMSK0|=(1<<TOIE0);//Enable Overflow Interrupt Enable
			
			bus_status.j1708_wait_idle_time = 1;
		}
		
		bus_status.j1708_tx_busy = 1; // we are busy now
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
	}
		
}
 372:	08 95       	ret
		j1708_tx_ptr = 0;
		j1708_tx_buffer = buffer;
		
		if ((bus_status.j1708_wait_idle_time==0) && (bus_status.j1708_busy==0)){
			
			count_times = 0;
 374:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
			bit_times = 10; //10 bit times reset the end-of-packet
 378:	8a e0       	ldi	r24, 0x0A	; 10
 37a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bit_times>
			TCNT0=47; //104 us overflow   1 bit times
 37e:	8f e2       	ldi	r24, 0x2F	; 47
 380:	86 bd       	out	0x26, r24	; 38
			TIMSK0|=(1<<TOIE0);//Enable Overflow Interrupt Enable
 382:	ee e6       	ldi	r30, 0x6E	; 110
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	80 83       	st	Z, r24
			
			bus_status.j1708_wait_idle_time = 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_edata+0x8>
 392:	ec cf       	rjmp	.-40     	; 0x36c <_Z17j1708_send_packetPhh+0x2a>
 394:	08 95       	ret

00000396 <_Z13j1708_tx_datav>:
void j1708_tx_data(){
	
	//bus_status.j1708_tx_busy = 1; // Now tx is busy
	
	// if the receiver is receiving.. or the idle timer is running... the bus is busy
	if(bus_status.j1708_busy){ //|| (UCSR1A>>RXC1)&0x01 ){ // we can't bus busy, // unread data in the receive buffer set
 396:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
 39a:	81 11       	cpse	r24, r1
 39c:	08 c0       	rjmp	.+16     	; 0x3ae <_Z13j1708_tx_datav+0x18>
		return;
	}else{
		UDR1 = j1708_my_mid; // send first MID
 39e:	80 e8       	ldi	r24, 0x80	; 128
 3a0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		j1708_checksum = j1708_my_mid; // start checksum calculation 		
 3a4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <j1708_checksum>
		bus_status.j1708_MID_sent = 1;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_edata+0x6>
 3ae:	08 95       	ret

000003b0 <_Z16handle_times_isrv>:
}

//used to generate an interrupt on the end of a packet AND as a transmit collision retry timer
void handle_times_isr(){
	
	bus_status.j1708_busy = 0; // not busy idle time, 10 bit times
 3b0:	e0 e0       	ldi	r30, 0x00	; 0
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	13 82       	std	Z+3, r1	; 0x03
	
	if(bus_status.j1708_random_collision_times){// wait pseudo random bit times
 3b6:	87 81       	ldd	r24, Z+7	; 0x07
 3b8:	88 23       	and	r24, r24
 3ba:	39 f0       	breq	.+14     	; 0x3ca <_Z16handle_times_isrv+0x1a>
		bus_status.j1708_random_collision_times = 0;
 3bc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_edata+0x7>
		j1708_collision_counter = 0; // reset collision counter
 3c0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <j1708_collision_counter>
		j1708_tx_data();
 3c4:	0e 94 cb 01 	call	0x396	; 0x396 <_Z13j1708_tx_datav>
		return;
 3c8:	08 95       	ret
	}
		
	if(bus_status.j1708_priority_check_flag){// reach priority delay
 3ca:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_edata+0x9>
 3ce:	88 23       	and	r24, r24
 3d0:	29 f0       	breq	.+10     	; 0x3dc <_Z16handle_times_isrv+0x2c>
		bus_status.j1708_priority_check_flag = 0;
 3d2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_edata+0x9>
		j1708_tx_data();
 3d6:	0e 94 cb 01 	call	0x396	; 0x396 <_Z13j1708_tx_datav>
		return;
 3da:	08 95       	ret
	}
	
	if(bus_status.j1708_transmitting){ // when are transmitting data bytes
 3dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3e0:	81 11       	cpse	r24, r1
 3e2:	41 c0       	rjmp	.+130    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		// read nothing
	}else{  // receive packet, end of packet and I can try tx
		// checksum
		if(j1708_checksum==0){ //valid
 3e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j1708_checksum>
 3e8:	81 11       	cpse	r24, r1
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <_Z16handle_times_isrv+0x42>
			bus_status.j1708_checksum_error = 0;
 3ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_edata+0x4>
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <_Z16handle_times_isrv+0x48>
		}else{//invalid
			bus_status.j1708_checksum_error = 1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_edata+0x4>
		}
		
		// save buffer;
		int i;
		for(i=0;i<j1708_rx_buffer0_count;i++){
 3f8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <j1708_rx_buffer0_count>
 3fc:	88 23       	and	r24, r24
 3fe:	89 f0       	breq	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
			j1708_rx_buff_save[i] = j1708_rx_buffer0[i];
 404:	fc 01       	movw	r30, r24
 406:	ef 5c       	subi	r30, 0xCF	; 207
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	20 81       	ld	r18, Z
 40c:	fc 01       	movw	r30, r24
 40e:	ef 5e       	subi	r30, 0xEF	; 239
 410:	fe 4f       	sbci	r31, 0xFE	; 254
 412:	20 83       	st	Z, r18
			bus_status.j1708_checksum_error = 1;
		}
		
		// save buffer;
		int i;
		for(i=0;i<j1708_rx_buffer0_count;i++){
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <j1708_rx_buffer0_count>
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	82 17       	cp	r24, r18
 41e:	93 07       	cpc	r25, r19
 420:	8c f3       	brlt	.-30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			j1708_rx_buff_save[i] = j1708_rx_buffer0[i];
		}
		len_rx_save = j1708_rx_buffer0_count;
 422:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <j1708_rx_buffer0_count>
 426:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <len_rx_save>
		
		if(len_rx_save!=0){ // we have a read packet
 42a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <len_rx_save>
 42e:	88 23       	and	r24, r24
 430:	19 f0       	breq	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			bus_status.j1708_finish_read_packet = 1;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_edata+0xa>
		}
		
		j1708_rx_buffer0_ptr = 0;
 438:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <j1708_rx_buffer0_ptr>
		j1708_rx_buffer0_count = 0;
 43c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <j1708_rx_buffer0_count>
		
		if (bus_status.j1708_tx_busy){
 440:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 444:	88 23       	and	r24, r24
 446:	79 f0       	breq	.+30     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			//// need to add priority time 
			count_times = 0;
 448:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
			bit_times = j1708_priority; //priority delay
 44c:	88 e0       	ldi	r24, 0x08	; 8
 44e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bit_times>
			TCNT0=47; //104 us overflow   1 bit tim
 452:	8f e2       	ldi	r24, 0x2F	; 47
 454:	86 bd       	out	0x26, r24	; 38
			TIMSK0|=(1<<TOIE0);//Enable Overflow Interrupt Enable
 456:	ee e6       	ldi	r30, 0x6E	; 110
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	80 83       	st	Z, r24
			bus_status.j1708_priority_check_flag = 1;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_edata+0x9>
 466:	08 95       	ret

00000468 <__vector_17>:
	TCNT0=47; //104 us overflow   1 bit time
}


ISR(TIMER0_OVF_vect)
{
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	//This is the interrupt service routine for TIMER0 OVERFLOW Interrupt.
	//CPU automatically call this when TIMER0 overflows.
	//Increment our variable
	TCNT0=47; //104 us overflow   1 bit time
 48a:	8f e2       	ldi	r24, 0x2F	; 47
 48c:	86 bd       	out	0x26, r24	; 38
	
	count_times++;
 48e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count_times>
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count_times>
	if(count_times==bit_times) //reach n bit times
 498:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count_times>
 49c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <bit_times>
 4a0:	98 13       	cpse	r25, r24
 4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <__vector_17+0x4e>
	{
		TIMSK0 &= ~(1<<TOIE0); // disable timer isr
 4a4:	ee e6       	ldi	r30, 0x6E	; 110
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	8e 7f       	andi	r24, 0xFE	; 254
 4ac:	80 83       	st	Z, r24
		count_times = 0;
 4ae:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count_times>
		handle_times_isr(); // then reach 10 bit time idle time
 4b2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_Z16handle_times_isrv>
	}
}
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <main>:


// main
int main(void)
{
	j1708_init();
 4d8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z10j1708_initv>
	uart0_init();
 4dc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z10uart0_initv>
	int8_t res_rx_uart0;
	//int8_t res_rx_j1708;
    /* Replace with your application code */
    while (1) 
    {
		res_rx_uart0 = uart0_rx_buff(uart0_in_buffer,&uart0_in_len);
 4e0:	63 e5       	ldi	r22, 0x53	; 83
 4e2:	71 e0       	ldi	r23, 0x01	; 1
 4e4:	84 e5       	ldi	r24, 0x54	; 84
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 30 03 	call	0x660	; 0x660 <_Z13uart0_rx_buffPhS_>
		//res_rx_j1708 = j1708_read_buffer(j1708_in_buffer,&j1708_in_len);
	  
		if(res_rx_uart0 < 0){
 4ec:	88 23       	and	r24, r24
 4ee:	c4 f3       	brlt	.-16     	; 0x4e0 <main+0x8>
			//error we dont have a complete rx packet yet, try later
		}else{
			j1708_send_packet(uart0_in_buffer,uart0_in_len); // shedule send packet to j1708 bus;
 4f0:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <_ZL12uart0_in_len>
 4f4:	84 e5       	ldi	r24, 0x54	; 84
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 a1 01 	call	0x342	; 0x342 <_Z17j1708_send_packetPhh>
 4fc:	f1 cf       	rjmp	.-30     	; 0x4e0 <main+0x8>

000004fe <__vector_22>:
		//enable UART interrupt
		UCSR0B |= (1 << UDRIE0); //enable sending

		return 0;
	}
}
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	8f 93       	push	r24
 50a:	9f 93       	push	r25
 50c:	ef 93       	push	r30
 50e:	ff 93       	push	r31
 510:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <uart0_len_out>
 514:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uart0_ptr_out>
 518:	89 17       	cp	r24, r25
 51a:	88 f4       	brcc	.+34     	; 0x53e <__vector_22+0x40>
 51c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uart0_ptr_out>
 520:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <uart0_buffer_out>
 524:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <uart0_buffer_out+0x1>
 528:	e8 0f       	add	r30, r24
 52a:	f1 1d       	adc	r31, r1
 52c:	80 81       	ld	r24, Z
 52e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 532:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uart0_ptr_out>
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <uart0_ptr_out>
 53c:	07 c0       	rjmp	.+14     	; 0x54c <__vector_22+0x4e>
 53e:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <uart0_len_out>
 542:	e1 ec       	ldi	r30, 0xC1	; 193
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	8f 7d       	andi	r24, 0xDF	; 223
 54a:	80 83       	st	Z, r24
 54c:	ff 91       	pop	r31
 54e:	ef 91       	pop	r30
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_21>:
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	8f 93       	push	r24
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
 56e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 572:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <uart0_ptr_in>
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	eb 56       	subi	r30, 0x6B	; 107
 57a:	fe 4f       	sbci	r31, 0xFE	; 254
 57c:	80 83       	st	Z, r24
 57e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <uart0_ptr_in>
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <uart0_ptr_in>
 588:	8f e2       	ldi	r24, 0x2F	; 47
 58a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 58e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <count_tmr2>
 592:	e0 e7       	ldi	r30, 0x70	; 112
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	81 60       	ori	r24, 0x01	; 1
 59a:	80 83       	st	Z, r24
 59c:	ff 91       	pop	r31
 59e:	ef 91       	pop	r30
 5a0:	8f 91       	pop	r24
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <_Z23uart0_rx_packet_timeoutv>:
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <flag_finish_rx_packet>
 5b2:	e0 e7       	ldi	r30, 0x70	; 112
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	8e 7f       	andi	r24, 0xFE	; 254
 5ba:	80 83       	st	Z, r24
 5bc:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <uart0_ptr_in>
 5c0:	88 23       	and	r24, r24
 5c2:	89 f0       	breq	.+34     	; 0x5e6 <_Z23uart0_rx_packet_timeoutv+0x3a>
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	fc 01       	movw	r30, r24
 5ca:	eb 56       	subi	r30, 0x6B	; 107
 5cc:	fe 4f       	sbci	r31, 0xFE	; 254
 5ce:	20 81       	ld	r18, Z
 5d0:	fc 01       	movw	r30, r24
 5d2:	eb 58       	subi	r30, 0x8B	; 139
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	20 83       	st	Z, r18
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <uart0_ptr_in>
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	82 17       	cp	r24, r18
 5e2:	93 07       	cpc	r25, r19
 5e4:	8c f3       	brlt	.-30     	; 0x5c8 <_Z23uart0_rx_packet_timeoutv+0x1c>
 5e6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <uart0_ptr_in>
 5ea:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <uart0_count_in>
 5ee:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <uart0_count_in>
 5f2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <uart0_rx_len_save>
 5f6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <uart0_ptr_in>
 5fa:	08 95       	ret

000005fc <__vector_10>:
 5fc:	1f 92       	push	r1
 5fe:	0f 92       	push	r0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	0f 92       	push	r0
 604:	11 24       	eor	r1, r1
 606:	2f 93       	push	r18
 608:	3f 93       	push	r19
 60a:	4f 93       	push	r20
 60c:	5f 93       	push	r21
 60e:	6f 93       	push	r22
 610:	7f 93       	push	r23
 612:	8f 93       	push	r24
 614:	9f 93       	push	r25
 616:	af 93       	push	r26
 618:	bf 93       	push	r27
 61a:	ef 93       	push	r30
 61c:	ff 93       	push	r31
 61e:	8f e2       	ldi	r24, 0x2F	; 47
 620:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 624:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <count_tmr2>
 628:	8f 5f       	subi	r24, 0xFF	; 255
 62a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <count_tmr2>
 62e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <count_tmr2>
 632:	8a 30       	cpi	r24, 0x0A	; 10
 634:	21 f4       	brne	.+8      	; 0x63e <__vector_10+0x42>
 636:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <count_tmr2>
 63a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z23uart0_rx_packet_timeoutv>
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	bf 91       	pop	r27
 644:	af 91       	pop	r26
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	7f 91       	pop	r23
 64c:	6f 91       	pop	r22
 64e:	5f 91       	pop	r21
 650:	4f 91       	pop	r20
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <_Z13uart0_rx_buffPhS_>:


int8_t uart0_rx_buff(uint8_t* buff_rx, uint8_t* len_rx){ // receive from serial port
	if(flag_finish_rx_packet){ //packet complete
 660:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <flag_finish_rx_packet>
 664:	22 23       	and	r18, r18
 666:	e1 f0       	breq	.+56     	; 0x6a0 <_Z13uart0_rx_buffPhS_+0x40>
		flag_finish_rx_packet = 0; // just clear flag
 668:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <flag_finish_rx_packet>
		int i;
		for(i=0;i<uart0_rx_len_save;i++){
 66c:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <uart0_rx_len_save>
 670:	22 23       	and	r18, r18
 672:	81 f0       	breq	.+32     	; 0x694 <_Z13uart0_rx_buffPhS_+0x34>
 674:	e8 2f       	mov	r30, r24
 676:	f9 2f       	mov	r31, r25
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	90 e0       	ldi	r25, 0x00	; 0
			buff_rx[i]=uart0_rx_save[i]; //transfer buffer
 67c:	dc 01       	movw	r26, r24
 67e:	ab 58       	subi	r26, 0x8B	; 139
 680:	be 4f       	sbci	r27, 0xFE	; 254
 682:	2c 91       	ld	r18, X
 684:	21 93       	st	Z+, r18

int8_t uart0_rx_buff(uint8_t* buff_rx, uint8_t* len_rx){ // receive from serial port
	if(flag_finish_rx_packet){ //packet complete
		flag_finish_rx_packet = 0; // just clear flag
		int i;
		for(i=0;i<uart0_rx_len_save;i++){
 686:	01 96       	adiw	r24, 0x01	; 1
 688:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <uart0_rx_len_save>
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	82 17       	cp	r24, r18
 690:	93 07       	cpc	r25, r19
 692:	a4 f3       	brlt	.-24     	; 0x67c <_Z13uart0_rx_buffPhS_+0x1c>
			buff_rx[i]=uart0_rx_save[i]; //transfer buffer
		}
		*len_rx = uart0_rx_len_save; // transfer len of buffer
 694:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <uart0_rx_len_save>
 698:	fb 01       	movw	r30, r22
 69a:	80 83       	st	Z, r24
		return 0;
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	08 95       	ret
	}else{ // cant read buff try again later;
		return -1;
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
 6a2:	08 95       	ret

000006a4 <_Z13config_timer2v>:


// config timer2
void config_timer2(void){
	// Pre scaler = FCPU/8
	TCCR2A |= (1<<CS21);
 6a4:	e0 eb       	ldi	r30, 0xB0	; 176
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	80 83       	st	Z, r24
	//Enable Overflow Interrupt Enable
	//TIMSK2|=(1<<TOIE2);
	
	//Initialize Counter
	TCNT2=47; //104 us overflow   1 bit time
 6ae:	8f e2       	ldi	r24, 0x2F	; 47
 6b0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 6b4:	08 95       	ret

000006b6 <_Z10uart0_initv>:

}


void uart0_init(void) {
	UBRR0H = UBRRH_VALUE;
 6b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 6ba:	87 e6       	ldi	r24, 0x67	; 103
 6bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	uart0_len_out = 0;
 6c0:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <uart0_len_out>
	uart0_ptr_out = 0;
 6c4:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <uart0_ptr_out>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 6c8:	e0 ec       	ldi	r30, 0xC0	; 192
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	8d 7f       	andi	r24, 0xFD	; 253
 6d0:	80 83       	st	Z, r24
	#endif

	
	UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);   /* Enable RX and TX, RX complete ISR */
 6d2:	e1 ec       	ldi	r30, 0xC1	; 193
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	88 e9       	ldi	r24, 0x98	; 152
 6d8:	80 83       	st	Z, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data, 1 stop bit, no parity, asynchronous UART*/
 6da:	86 e0       	ldi	r24, 0x06	; 6
 6dc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

	UCSR0B &= ~(1 << UDRIE0); //Disable sending, ready TX buffer
 6e0:	80 81       	ld	r24, Z
 6e2:	8f 7d       	andi	r24, 0xDF	; 223
 6e4:	80 83       	st	Z, r24

	//set_sleep_mode(SLEEP_MODE_IDLE);
	//enable global interrupt
	config_timer2();
 6e6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_Z13config_timer2v>
	sei();
 6ea:	78 94       	sei
 6ec:	08 95       	ret

000006ee <_exit>:
 6ee:	f8 94       	cli

000006f0 <__stop_program>:
 6f0:	ff cf       	rjmp	.-2      	; 0x6f0 <__stop_program>
