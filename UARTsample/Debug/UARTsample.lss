
UARTsample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800108  00800108  000003e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d1  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd8  00000000  00000000  000015e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000619  00000000  00000000  000022c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000824  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000281  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000354d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_17>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_21>
  58:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_22>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  80:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_32>
  84:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_33>
  88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 e4       	ldi	r30, 0x48	; 72
  a8:	f3 e0       	ldi	r31, 0x03	; 3
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a8 30       	cpi	r26, 0x08	; 8
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a8 e0       	ldi	r26, 0x08	; 8
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a5 31       	cpi	r26, 0x15	; 21
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  ca:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_Z13config_timer0v>:

void putString (char *str)
{
	while (*str) 
		uart_putchar(*str++);
}
  d2:	84 b5       	in	r24, 0x24	; 36
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	84 bd       	out	0x24, r24	; 36
  d8:	ee e6       	ldi	r30, 0x6E	; 110
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
  e2:	78 94       	sei
  e4:	16 bc       	out	0x26, r1	; 38
  e6:	08 95       	ret

000000e8 <__vector_17>:
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count>
 100:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <count+0x1>
 104:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <count+0x2>
 108:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <count+0x3>
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	a1 1d       	adc	r26, r1
 110:	b1 1d       	adc	r27, r1
 112:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <count>
 116:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <count+0x1>
 11a:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <count+0x2>
 11e:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <count+0x3>
 122:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count>
 126:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <count+0x1>
 12a:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <count+0x2>
 12e:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <count+0x3>
 132:	83 3a       	cpi	r24, 0xA3	; 163
 134:	9e 41       	sbci	r25, 0x1E	; 30
 136:	a1 05       	cpc	r26, r1
 138:	b1 05       	cpc	r27, r1
 13a:	59 f4       	brne	.+22     	; 0x152 <__vector_17+0x6a>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 142:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count>
 146:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <count+0x1>
 14a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count+0x2>
 14e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count+0x3>
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <main>:



int main(void)
{
	config_timer0();
 166:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z13config_timer0v>
	uart1_init();
 16a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z10uart1_initv>
	uart0_init();
 16e:	0e 94 06 01 	call	0x20c	; 0x20c <_Z10uart0_initv>
	
	
    /* Replace with your application code */
    while (1) 
    {
		if(flag_count){
 172:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 176:	88 23       	and	r24, r24
 178:	e1 f3       	breq	.-8      	; 0x172 <main+0xc>
			//int8_t t;
			//uart1_send_buff(test_string,6);//strlen(test_string));
			uart0_send_buff(test_string,6);
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 20 01 	call	0x240	; 0x240 <_Z15uart0_send_buffPhh>
			uart1_send_buff(test_string,6);
 184:	66 e0       	ldi	r22, 0x06	; 6
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 8c 01 	call	0x318	; 0x318 <_Z15uart1_send_buffPhh>
			flag_count = false;
 18e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 192:	ef cf       	rjmp	.-34     	; 0x172 <main+0xc>

00000194 <__vector_22>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(USART0_UDRE_vect)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	if(send_num0 > send_pos0){
 1a6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZL9send_pos0>
 1aa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZL9send_num0>
 1ae:	89 17       	cp	r24, r25
 1b0:	78 f4       	brcc	.+30     	; 0x1d0 <__vector_22+0x3c>
		UDR0= send_buf0[send_pos0];
 1b2:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <_ZL9send_buf0>
 1b6:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <_ZL9send_buf0+0x1>
 1ba:	e8 0f       	add	r30, r24
 1bc:	f1 1d       	adc	r31, r1
 1be:	80 81       	ld	r24, Z
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		send_pos0++;
 1c4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZL9send_pos0>
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZL9send_pos0>
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <__vector_22+0x4a>
	} else {
		send_num0= 0;
 1d0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZL9send_num0>
		//disable sending interrupt
		UCSR0B &= ~(1 << UDRIE0); //Disable sending
 1d4:	e1 ec       	ldi	r30, 0xC1	; 193
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	8f 7d       	andi	r24, 0xDF	; 223
 1dc:	80 83       	st	Z, r24
	}
}
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_21>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(USART0_RX_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
	//ring_buffer_put(&ring_buffer_in, UDR0);
	uint8_t temp;
	
	
	temp = UDR0; // read buffer
 1fc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	//UDR0 = temp;
	
	//flag_rx = true;
	
}
 200:	8f 91       	pop	r24
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <_Z10uart0_initv>:


void uart0_init(void) {
	UBRR0H = UBRRH_VALUE;
 20c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 210:	87 e6       	ldi	r24, 0x67	; 103
 212:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	send_pos0= 0;
 216:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <_ZL9send_pos0>
	send_num0= 0;
 21a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZL9send_num0>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 21e:	e0 ec       	ldi	r30, 0xC0	; 192
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	8d 7f       	andi	r24, 0xFD	; 253
 226:	80 83       	st	Z, r24
	#endif

	
	UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);   /* Enable RX and TX, RX complete ISR */
 228:	e1 ec       	ldi	r30, 0xC1	; 193
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	88 e9       	ldi	r24, 0x98	; 152
 22e:	80 83       	st	Z, r24
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data, 1 stop bit, no parity, asynchronous UART*/
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

	UCSR0B &= ~(1 << UDRIE0); //Disable sending, ready TX buffer
 236:	80 81       	ld	r24, Z
 238:	8f 7d       	andi	r24, 0xDF	; 223
 23a:	80 83       	st	Z, r24

	//set_sleep_mode(SLEEP_MODE_IDLE);
	//enable global interrupt
	sei();
 23c:	78 94       	sei
 23e:	08 95       	ret

00000240 <_Z15uart0_send_buffPhh>:
}

// send buffer
int8_t uart0_send_buff(uint8_t* buffer, uint8_t num){
 240:	9c 01       	movw	r18, r24
	
	if(send_num0){
 242:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZL9send_num0>
 246:	91 11       	cpse	r25, r1
 248:	0f c0       	rjmp	.+30     	; 0x268 <_Z15uart0_send_buffPhh+0x28>
		//fail because we are already sending something
		return -1;
	} else {
		send_num0 = num;
 24a:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <_ZL9send_num0>
		send_pos0 = 0;
 24e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <_ZL9send_pos0>
		send_buf0 = buffer;
 252:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <_ZL9send_buf0+0x1>
 256:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <_ZL9send_buf0>
		//enable UART interrupt
		UCSR0B |= (1 << UDRIE0); //enable sending
 25a:	e1 ec       	ldi	r30, 0xC1	; 193
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 62       	ori	r24, 0x20	; 32
 262:	80 83       	st	Z, r24

		return 0;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
// send buffer
int8_t uart0_send_buff(uint8_t* buffer, uint8_t num){
	
	if(send_num0){
		//fail because we are already sending something
		return -1;
 268:	8f ef       	ldi	r24, 0xFF	; 255
		//enable UART interrupt
		UCSR0B |= (1 << UDRIE0); //enable sending

		return 0;
	}
}
 26a:	08 95       	ret

0000026c <__vector_33>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(USART1_UDRE_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	if(send_num1 > send_pos1){
 27e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL9send_pos1>
 282:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_ZL9send_num1>
 286:	89 17       	cp	r24, r25
 288:	78 f4       	brcc	.+30     	; 0x2a8 <__vector_33+0x3c>
		UDR1= send_buf1[send_pos1];
 28a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <_ZL9send_buf1>
 28e:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <_ZL9send_buf1+0x1>
 292:	e8 0f       	add	r30, r24
 294:	f1 1d       	adc	r31, r1
 296:	80 81       	ld	r24, Z
 298:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		send_pos1++;
 29c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL9send_pos1>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZL9send_pos1>
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <__vector_33+0x4a>
	} else {
		send_num1= 0;
 2a8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <_ZL9send_num1>
		//disable sending interrupt
		UCSR1B &= ~(1 << UDRIE1); //Disable sending
 2ac:	e9 ec       	ldi	r30, 0xC9	; 201
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	8f 7d       	andi	r24, 0xDF	; 223
 2b4:	80 83       	st	Z, r24
	}
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <__vector_32>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(USART1_RX_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	8f 93       	push	r24
	//ring_buffer_put(&ring_buffer_in, UDR0);
	uint8_t temp;
	
	
	temp = UDR1; // read buffer
 2d4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	
	//UDR1 = temp;
	
	//flag_rx = true;
	
}
 2d8:	8f 91       	pop	r24
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <_Z10uart1_initv>:


void uart1_init(void) {
	UBRR1H = UBRRH_VALUE;
 2e4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = UBRRL_VALUE;
 2e8:	87 e6       	ldi	r24, 0x67	; 103
 2ea:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	send_pos1= 0;
 2ee:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_ZL9send_pos1>
	send_num1= 0;
 2f2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <_ZL9send_num1>

	#if USE_2X
	UCSR1A |= _BV(U2X1);
	#else
	UCSR1A &= ~(_BV(U2X1));
 2f6:	e8 ec       	ldi	r30, 0xC8	; 200
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	8d 7f       	andi	r24, 0xFD	; 253
 2fe:	80 83       	st	Z, r24
	#endif

	
	UCSR1B = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);   /* Enable RX and TX, RX complete ISR */
 300:	e9 ec       	ldi	r30, 0xC9	; 201
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	88 e9       	ldi	r24, 0x98	; 152
 306:	80 83       	st	Z, r24
	UCSR1C = _BV(UCSZ11) | _BV(UCSZ10); /* 8-bit data, 1 stop bit, no parity, asynchronous UART*/
 308:	86 e0       	ldi	r24, 0x06	; 6
 30a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	UCSR1B &= ~(1 << UDRIE1); //Disable sending, ready TX buffer
 30e:	80 81       	ld	r24, Z
 310:	8f 7d       	andi	r24, 0xDF	; 223
 312:	80 83       	st	Z, r24

	//set_sleep_mode(SLEEP_MODE_IDLE);
	//enable global interrupt
	sei();
 314:	78 94       	sei
 316:	08 95       	ret

00000318 <_Z15uart1_send_buffPhh>:
}

// send buffer
int8_t uart1_send_buff(uint8_t* buffer, uint8_t num){
 318:	9c 01       	movw	r18, r24
	
	if(send_num1){
 31a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_ZL9send_num1>
 31e:	91 11       	cpse	r25, r1
 320:	0f c0       	rjmp	.+30     	; 0x340 <_Z15uart1_send_buffPhh+0x28>
		//fail because we are already sending something
		return -1;
	} else {
		send_num1= num;
 322:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <_ZL9send_num1>
		send_pos1= 0;
 326:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_ZL9send_pos1>
		send_buf1= buffer;
 32a:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <_ZL9send_buf1+0x1>
 32e:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <_ZL9send_buf1>
		//enable UART interrupt
		UCSR1B |= (1 << UDRIE1); //enable sending
 332:	e9 ec       	ldi	r30, 0xC9	; 201
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	80 62       	ori	r24, 0x20	; 32
 33a:	80 83       	st	Z, r24

		return 0;
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
// send buffer
int8_t uart1_send_buff(uint8_t* buffer, uint8_t num){
	
	if(send_num1){
		//fail because we are already sending something
		return -1;
 340:	8f ef       	ldi	r24, 0xFF	; 255
		//enable UART interrupt
		UCSR1B |= (1 << UDRIE1); //enable sending

		return 0;
	}
}
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
